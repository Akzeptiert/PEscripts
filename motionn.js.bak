const motion = new motion("motion", true, true, ModuleCategory.MISC);
const width = new SliderSetting("Width", [2.5, 0, 5, 0.1]);
const colorR = new SliderSetting("Color red", [255, 0, 255, 5]);
const colorG = new SliderSetting("Color green", [150, 0, 255, 5]);
const colorB = new SliderSetting("Color blue", [0, 0, 255, 5]);

const ctx = getContext();
const GL10 = javax.microedition.khronos.opengles.GL10;
const GLU = android.opengl.GLU;

const Render = {
    renderer: null,
    glSurface: null,
    fov: 110,
    initted: false,
    init: function() {
        this.renderer = new android.opengl.GLSurfaceView.Renderer({
            onSurfaceCreated: function(gl, config) {
                gl.glEnable(GL10.GL_TEXTURE_2D);
                gl.glClearColor(0, 0, 0, 0);
                gl.glClearDepthf(1);
                gl.glEnable(GL10.GL_DEPTH_TEST);
                gl.glDepthFunc(GL10.GL_LEQUAL);
                gl.glDisable(GL10.GL_PERSPECTIVE_CORRECTION_HINT);
            },
            onSurfaceChanged: function(gl, width, height) {
                gl.glMatrixMode(GL10.GL_PROJECTION);
                gl.glLoadIdentity();

                GLU.gluPerspective(gl, Render.fov * Math.sqrt(Memory.getFloat(Memory.getLevelRenderer(), 0x1440)), ctx.getResources().getDisplayMetrics().widthPixels / ctx.getResources().getDisplayMetrics().heightPixels, .1, 100);

                gl.glMatrixMode(GL10.GL_MODELVIEW);
                gl.glLoadIdentity();
            },
            onDrawFrame: function(gl) {
                gl.glMatrixMode(GL10.GL_PROJECTION);
                gl.glLoadIdentity();

                let width = ctx.getResources().getDisplayMetrics().widthPixels;
                let height = ctx.getResources().getDisplayMetrics().heightPixels;
                gl.glOrthof(-width / 2, width / 2, -height / 2, height / 2, -1, 1);

                gl.glMatrixMode(GL10.GL_MODELVIEW);
                gl.glLoadIdentity();

                gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
                gl.glLoadIdentity();
                gl.glDisable(GL10.GL_LIGHTING);

                if (getScreenName().equals("hud_screen")) {
                    try {
                        Render.drawText(gl, "Hi", 0, 0, 0, 1, 1, 1, 1);
                    } catch (e) {
                        print(e + e.lineNumber);
                    }
                }
            }
        });

        // Запуск кода обновления интерфейса в основном потоке
        ctx.runOnUiThread(() => {
            Render.glSurface = new android.opengl.GLSurfaceView(ctx);
            Render.glSurface.setZOrderOnTop(true);
            Render.glSurface.setEGLConfigChooser(8, 8, 8, 8, 16, 0);
            Render.glSurface.getHolder().setFormat(android.graphics.PixelFormat.TRANSLUCENT);
            Render.glSurface.setRenderer(Render.renderer);
            Render.glSurface.setRenderMode(0);

            ctx.getWindow().getDecorView().addView(Render.glSurface);

            Render.initted = true;
        });
    },

    drawText: function(gl, str, x, y, z, scaleX, scaleY, scaleZ, alpha) {
        let textRenderer = new android.graphics.Paint();
        textRenderer.setAntiAlias(true);
        textRenderer.setTextSize(50);
        textRenderer.setARGB(alpha * 255, colorR.getCurrentValue(), colorG.getCurrentValue(), colorB.getCurrentValue());

        let bitmap = android.graphics.Bitmap.createBitmap(256, 256, android.graphics.Bitmap.Config.ARGB_8888);
        let canvas = new android.graphics.Canvas(bitmap);
        canvas.drawText(str, 50, 128, textRenderer);

        let texture = android.opengl.GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, bitmap, 0);
        bitmap.recycle();

        gl.glEnable(GL10.GL_BLEND);
        gl.glDepthMask(false);
        gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);

        gl.glPushMatrix();
        gl.glTranslatef(x, y, z);
        gl.glScalef(scaleX, scaleY, scaleZ);
        gl.glBindTexture(GL10.GL_TEXTURE_2D, texture);
        gl.glEnable(GL10.GL_TEXTURE_2D);

        // Отрисовка квадрата с текстурой (текстом)
        let vertices = [-1, -1, 0, 1, -1, 0, -1, 1, 0, 1, 1, 0];
        let vertexBuffer = Render.getFloatBuffer(vertices);

        let texCoords = [0, 1, 1, 1, 0, 0, 1, 0];
        let texBuffer = Render.getFloatBuffer(texCoords);

        gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
        gl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);
        gl.glEnableClientState(GL10.GL_TEXTURE_COORD_ARRAY);
        gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, texBuffer);

        gl.glDrawArrays(GL10.GL_TRIANGLE_STRIP, 0, 4);

        gl.glDisableClientState(GL10.GL_VERTEX_ARRAY);
        gl.glDisableClientState(GL10.GL_TEXTURE_COORD_ARRAY);

        gl.glDisable(GL10.GL_BLEND);
        gl.glPopMatrix();
    }
};

motion.setOnToggleListener(function() {
    if (!LocalPlayer.isInGame()) { print("Join world first!"); return; }
    if (!Render.initted) { Render.init(); }
});

function onFastTick() {
    if (motion != null && motion.isActive() && LocalPlayer.isInGame() && Render.initted) {
        Render.glSurface.requestRender();
    }
}

function onScriptEnabled() {
    ModuleManager.addModule(motion);
    if (!Render.initted) { Render.init(); }
}

function onScriptDisabled() {
    ModuleManager.removeModule(motion);
}