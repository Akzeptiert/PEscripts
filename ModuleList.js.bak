const module = new Module("ModuleList", true, true, ModuleCategory.MISC);
const rtb = new StateSetting("rgbStroke", false);
const mode = new ModeSetting("Mode", ["Rainbow", "Custom"]);
const modeback = new ModeSetting("Mode BackGround", ["–ü—Ä–æ—Å—Ç–æ –ß—ë—Ä–Ω—ã–π", "–ü—Ä–æ–∑—Ä–∞—á–Ω–æ –ß—ë—Ä–Ω—ã–π"]);
const size = new SliderSetting("Size", [0.6, 0, 1, 0.01]);
const distanceBetweenElements = new SliderSetting("Distance between elements", [5, 0, 25, 0.1]);
const colorLimitation = new SliderSetting("Color limitation", [180, 0, 360, 1]);
const length = new SliderSetting("Length", [500, 1, 1000, 1]);
const speed = new SliderSetting("Speed", [20, 1, 50, 1]);

var popup = null;
var layout = null;

if (Data.getBoolean("loaded", true)) {
    Data.remove("loaded");

    size.setOnCurrentValueChangedListener(value => {
        updateLayout();
    });

    distanceBetweenElements.setOnCurrentValueChangedListener(value => {
        updateLayout();
    });

    module.addSettings([mode, rtb, modeback, size, distanceBetweenElements, colorLimitation, length, speed]);

    module.setOnToggleListener(function() {
        if (module.isActive()) {
            getContext().runOnUiThread(new java.lang.Runnable({
                run: function() {
                    popup.showAtLocation(getContext().getWindow().getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.TOP, 0, 5);
                }
            }));
        } else {
            popup.dismiss();
        }
    });

    ModuleManager.addModule(module);
    arraylist();
}

function updateLayout() {
    getContext().runOnUiThread(new java.lang.Runnable({
        run: function() {
            refreshMods(layout, java.lang.System.currentTimeMillis());
        }
    }));
}

let io = rtb;

function getCustomColor() {
    let hue, saturation, value;

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π hue
    hue = Math.ceil((java.lang.System.currentTimeMillis()) / 20) % 360;

    // –ò—Å–∫–ª—é—á–∞–µ–º –∫–æ—Ä–∏—á–Ω–µ–≤—ã–π (20-40) –∏ –∑–µ–ª–µ–Ω—ã–π (80-160) –æ—Ç—Ç–µ–Ω–∫–∏
    if (hue >= 20 && hue <= 40) {
    hue = 41;
    }
    if (hue >= 80 && hue <= 160) {
        hue = 161; // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –Ω–∞ —Ü–≤–µ—Ç –≤–Ω–µ –∫–æ—Ä–∏—á–Ω–µ–≤–æ–≥–æ –∏ –∑–µ–ª–µ–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω—É—é –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å –∏ —è—Ä–∫–æ—Å—Ç—å –¥–ª—è —è—Ä–∫–∏—Ö —Ü–≤–µ—Ç–æ–≤
    saturation = 100;
    value = 100;

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º HSV –≤ —Ü–≤–µ—Ç, –∏—Å–∫–ª—é—á–∞—è –∫–æ—Ä–∏—á–Ω–µ–≤—ã–π –∏ –∑–µ–ª–µ–Ω—ã–π
    return android.graphics.Color.HSVToColor([hue, saturation, value]);
}



function color(c) {
    var v1 = Math.ceil(java.lang.System.currentTimeMillis() + (c * length.getCurrentValue())) / speed.getCurrentValue();
    v1 %= 360;
    return android.graphics.Color.HSVToColor([mode.getCurrentMode() == "Rainbow" ? v1 : v1 > colorLimitation.getCurrentValue() ? v1 : 360 - v1, 0.6, 1]);
}

function dip2px(px) {
    return getContext().getResources().getDisplayMetrics().density * px;
}

function text(module, index) {
    var transparentBlack = android.graphics.Color.HSVToColor(128, [0, 0, 0]);

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ–Ω–∞
    var bg = new android.graphics.drawable.GradientDrawable();
    let mod = modeback.getCurrentMode();
    
    if (mod == "–ü—Ä–æ—Å—Ç–æ –ß—ë—Ä–Ω—ã–π") {
        bg.setColor(android.graphics.Color.BLACK);
    } else if (mod == "–ü—Ä–æ–∑—Ä–∞—á–Ω–æ –ß—ë—Ä–Ω—ã–π") {
        bg.setColor(transparentBlack);
    } else {
        bg.setColor(android.graphics.Color.BLACK);
    }
    bg.setAlpha(220);

    // –°–æ–∑–¥–∞–Ω–∏–µ Drawable –¥–ª—è –æ–±–≤–æ–¥–∫–∏
    var strokeDrawable = new android.graphics.drawable.GradientDrawable();
    let collor = android.graphics.Color.GREEN;  // üåà
    strokeDrawable.setColor(android.graphics.Color.TRANSPARENT); // –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω –¥–ª—è –æ–±–≤–æ–¥–∫–∏
        var transparentBlak = android.graphics.Color.HSVToColor(80, [0, 0, 0]);
        var transparentBlac = android.graphics.Color.HSVToColor(205, [0, 0, 0]);
        if (mod == "–ü—Ä–æ—Å—Ç–æ –ß—ë—Ä–Ω—ã–π") {
        if (rtb) {
    strokeDrawable.setStroke(dip2px(2), collor);
    } else {
        strokeDrawable.setStroke(dip2px(2), transparentBlak);
        }
    } else if (mod == "–ü—Ä–æ–∑—Ä–∞—á–Ω–æ –ß—ë—Ä–Ω—ã–π") {
    if (rtb) {
    strokeDrawable.setStroke(dip2px(2), collor);
    } else {
        strokeDrawable.setStroke(dip2px(2), transparentBlac);
        }
    } else {
        strokeDrawable.setStroke(dip2px(2), android.graphics.Color.BLACK);
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ LayerDrawable –¥–ª—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ–Ω–∞ –∏ –æ–±–≤–æ–¥–∫–∏
    var layers = new android.graphics.drawable.LayerDrawable([strokeDrawable, bg]);

    var text = new android.widget.TextView(getContext());
    text.setId(1337 + index);
    text.setText(module);
    text.setTypeface(android.graphics.Typeface.MONOSPACE);
    text.setTextSize(android.util.TypedValue.COMPLEX_UNIT_SP, 20 * size.getCurrentValue());
    text.setPadding(dip2px(3), dip2px(1), dip2px(3), dip2px(1));
    text.setGravity(android.view.Gravity.RIGHT);
    text.setTextColor(android.graphics.Color.WHITE);

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–∞ —Å –æ–±–≤–æ–¥–∫–æ–π
    text.setBackground(layers);

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
    var params = new android.widget.RelativeLayout.LayoutParams(android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
    params.addRule(android.widget.RelativeLayout.ALIGN_PARENT_RIGHT, android.widget.RelativeLayout.TRUE);
    params.setMargins(0, (text.getLineHeight() + 3 + distanceBetweenElements.getCurrentValue()) * index, 0, 0);
    text.setLayoutParams(params);

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç—Å—Ç—É–ø–æ–≤ –¥–ª—è –æ–±–≤–æ–¥–∫–∏
    layers.setLayerInset(0, 0, 0, dip2px(-15), dip2px(2)); // –ù–∏–∂–Ω—è—è –æ–±–≤–æ–¥–∫–∞
    layers.setLayerInset(0, dip2px(-0.5), 0, dip2px(-15), 0); // –õ–µ–≤–∞—è –æ–±–≤–æ–¥–∫–∞
    layers.setLayerInset(0, 0, dip2px(-30), dip2px(-15), 0); // –í–µ—Ä—Ö–Ω—è—è –æ–±–≤–æ–¥–∫–∞

    return text;
}

function refreshMods(layout, time) {
	layout.removeAllViews();
    var names = new Array();
    ModuleManager.getModuleNames().forEach(function (e, i, a) {
        if (Module.isActive(e) && e != "Notifications" && e != "ModuleList"/* && check(e)*/) {
            names.push(e);
        };
	});

    var paint = new android.graphics.Paint();
    paint.setTypeface(android.graphics.Typeface.MONOSPACE);
    paint.setTextSize(0x539);
    names.sort(function(s1, s2) {
        return paint.measureText(s2) - paint.measureText(s1);
    });

	names.forEach(function (e, i, a) {
        if (Module.isActive(e)) {
            var view = new text(e, i, layout);
            view.setGravity(android.view.Gravity.CENTER_VERTICAL | android.view.Gravity.RIGHT);
	        layout.addView(view);
        };
	});
};

function arraylist() {
    getContext().runOnUiThread(new java.lang.Runnable({
        run: function() {
            try {
                layout = new android.widget.RelativeLayout(getContext());
                refreshMods(layout, java.lang.System.currentTimeMillis());

                popup = new android.widget.PopupWindow(layout, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT, android.widget.RelativeLayout.LayoutParams.MATCH_PARENT);
                popup.setAnimationStyle(android.R.style.Animation_Translucent);
                popup.setTouchable(false);

                startRefreshThread();

            } catch (e) {
                throw e;
            }
        }
    }));
}

function startRefreshThread() {
    var handler = new android.os.Handler();
    var thread = function() {
        handler.postDelayed(new java.lang.Runnable({
            run: function() {
                try {
                    if (module.isActive()) {
                        var number_of_modules = 0;
                        var names = ModuleManager.getModuleNames();
                        names.forEach(function(e) {
                            if (Module.isActive(e)) {
                                number_of_modules++;
                            }
                        });

                        if (layout.getChildCount() != number_of_modules) {
                            refreshMods(layout, java.lang.System.currentTimeMillis());
                        }

                        for (var i = 0; i < layout.getChildCount(); i++) {
                            layout.getChildAt(i).setTextColor(color(i));
                            layout.getChildAt(i).setShadowLayer(5, 0, 0, color(i));
                        }
                    }
                    thread();
                } catch (e) {
                    print(e + " at #" + e.lineNumber);
                }
            }
        }), 20);
    };
    thread();
}

function onFaskTick() {
if (module.isActive()) {
refreshMods(layout, java.lang.System.currentTimeMillis());
}
}